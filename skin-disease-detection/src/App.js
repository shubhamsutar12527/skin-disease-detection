# Create the complete App.js file with the user's API key already integrated
app_js_with_api = """import React, { useState, useRef, useEffect } from 'react';
import './App.css';

// Language data
const translations = {
    en: {
        title: "AI Skin Disease Detection",
        tagline: "Your intelligent health companion - Detect skin conditions using advanced AI",
        tabDiagnosis: "ЁЯФм Skin Diagnosis",
        tabChatbot: "ЁЯдЦ Health Assistant",
        diagnosisInstructions: "Upload an image or take a photo to get AI-powered analysis of skin conditions.",
        disclaimer: "тЪая╕П Medical Disclaimer: This tool is for educational purposes only and not a substitute for professional medical advice. Always consult a qualified dermatologist.",
        imagePlaceholder: "ЁЯУ╖ Image Preview Area",
        uploadButton: "ЁЯУБ Upload Image",
        takePhotoButton: "ЁЯУ╖ Take Photo",
        capturePhotoButton: "ЁЯУ╕ Capture",
        switchCameraButton: "ЁЯФД Switch Camera",
        analyzeButton: "ЁЯза Analyze with AI",
        analyzing: "ЁЯФН Analyzing...",
        analysisResults: "ЁЯУК AI Analysis Results",
        diseaseName: "Condition:",
        confidenceScore: "Confidence:",
        symptomsTitle: "ЁЯй║ Common Symptoms",
        basicPrecautionsTitle: "ЁЯТб Care & Prevention Tips",
        precautionsDefault: [
            "ЁЯз┤ Cleanse gently: Use mild, pH-balanced cleanser twice daily",
            "ЁЯТз Moisturize regularly: Keep skin hydrated with suitable moisturizer",
            "тШАя╕П Sun protection: Use SPF 30+ sunscreen daily, even indoors",
            "ЁЯеЧ Healthy diet: Eat antioxidant-rich foods and stay hydrated"
        ],
        precautionsAcne: [
            "ЁЯз╝ Wash face twice daily with gentle, oil-free cleanser",
            "ЁЯЪл Avoid touching face to prevent bacterial spread",
            "тЬи Use non-comedogenic (non-pore-clogging) products only",
            "тЫФ Never pop pimples - this causes scarring and infection"
        ],
        precautionsEczema: [
            "ЁЯТз Keep skin moisturized, especially after bathing",
            "ЁЯЪл Avoid harsh soaps, detergents, and fragranced products",
            "ЁЯМбя╕П Use lukewarm water for baths and showers",
            "ЁЯСХ Wear loose, breathable cotton clothing"
        ],
        precautionsFungal: [
            "ЁЯз╜ Keep affected area clean and completely dry",
            "ЁЯТК Apply antifungal cream/powder as directed by pharmacist",
            "ЁЯЪл Don't share towels, hats, combs, or personal items",
            "ЁЯСФ Wear clean, breathable clothing and change daily"
        ],
        precautionsHealthy: [
            "ЁЯеЧ Maintain balanced diet with vitamins and minerals",
            "тШАя╕П Daily sunscreen protects from premature aging",
            "ЁЯТз Cleanse and moisturize regularly for healthy glow",
            "ЁЯЪн Avoid smoking and excessive alcohol consumption"
        ],
        precautionsDisclaimer: "ЁЯТб These are general wellness tips. For specific medical concerns, always consult a healthcare professional.",
        chatbotInstructions: "Ask me anything about skin health, conditions, or general wellness advice.",
        chatbotPlaceholder: "Type your health question here...",
        sendButton: "Send",
        chatbotInitialMessage: "ЁЯСЛ Hello! I'm your AI health assistant. Ask me about skin conditions, symptoms, or general health advice.",
        networkError: "ЁЯМР Connection issue. Please check your internet and try again.",
        apiError: "ЁЯдЦ AI temporarily unavailable. Please try again in a moment.",
        cameraError: "ЁЯУ╖ Camera access denied. Please enable camera permissions in browser settings.",
        browserError: "тЭМ Your browser doesn't support camera features. Try Chrome or Firefox.",
        uploadError: "ЁЯУ╕ Please upload an image or take a photo first before analysis.",
        analysisFailed: "тЭМ Analysis failed. Please try a clearer, well-lit image.",
        language: "ЁЯМР Language",
        langInstruction: "in English",
        photoTips: "ЁЯУЛ Tips for Better Results:",
        tip1: "ЁЯТб Ensure bright, natural lighting (near window is best)",
        tip2: "ЁЯФН Take clear, focused photo of affected skin area",
        tip3: "ЁЯСН Remove jewelry/clothing that blocks the view",
        tip4: "ЁЯУП Keep camera 6-12 inches away for optimal detail"
    },
    hi: {
        title: "AI рддреНрд╡рдЪрд╛ рд░реЛрдЧ рдЬрд╛рдВрдЪ",
        tagline: "рдЖрдкрдХрд╛ рдмреБрджреНрдзрд┐рдорд╛рди рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╛рдереА - рдЙрдиреНрдирдд AI рд╕реЗ рддреНрд╡рдЪрд╛ рдХреА рд╕рдорд╕реНрдпрд╛рдУрдВ рдХреА рдкрд╣рдЪрд╛рди рдХрд░реЗрдВ",
        tabDiagnosis: "ЁЯФм рддреНрд╡рдЪрд╛ рдЬрд╛рдВрдЪ",
        tabChatbot: "ЁЯдЦ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ",
        diagnosisInstructions: "AI рджреНрд╡рд╛рд░рд╛ рддреНрд╡рдЪрд╛ рдХреА рд╕реНрдерд┐рддрд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ рдпрд╛ рдЦреАрдВрдЪреЗрдВред",
        disclaimer: "тЪая╕П рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЕрд╕реНрд╡реАрдХрд░рдг: рдпрд╣ рдЙрдкрдХрд░рдг рдХреЗрд╡рд▓ рд╢реИрдХреНрд╖рд┐рдХ рдЙрджреНрджреЗрд╢реНрдпреЛрдВ рдХреЗ рд▓рд┐рдП рд╣реИ рдФрд░ рдкреЗрд╢реЗрд╡рд░ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд▓рд╛рд╣ рдХрд╛ рд╡рд┐рдХрд▓реНрдк рдирд╣реАрдВ рд╣реИред рд╣рдореЗрд╢рд╛ рдпреЛрдЧреНрдп рддреНрд╡рдЪрд╛ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред",
        imagePlaceholder: "ЁЯУ╖ рддрд╕реНрд╡реАрд░ рдкреВрд░реНрд╡рд╛рд╡рд▓реЛрдХрди рдХреНрд╖реЗрддреНрд░",
        uploadButton: "ЁЯУБ рдлрд╝рд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
        takePhotoButton: "ЁЯУ╖ рдлреЛрдЯреЛ рдЦреАрдВрдЪреЗрдВ",
        capturePhotoButton: "ЁЯУ╕ рдХреИрдкреНрдЪрд░ рдХрд░реЗрдВ",
        switchCameraButton: "ЁЯФД рдХреИрдорд░рд╛ рдмрджрд▓реЗрдВ",
        analyzeButton: "ЁЯза AI рд╕реЗ рдЬрд╛рдВрдЪ рдХрд░реЗрдВ",
        analyzing: "ЁЯФН рдЬрд╛рдВрдЪ рд╣реЛ рд░рд╣реА рд╣реИ...",
        analysisResults: "ЁЯУК AI рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд░рд┐рдгрд╛рдо",
        diseaseName: "рд╕реНрдерд┐рддрд┐:",
        confidenceScore: "рд╡рд┐рд╢реНрд╡рд╛рд╕ рд╕реНрддрд░:",
        symptomsTitle: "ЁЯй║ рд╕рд╛рдорд╛рдиреНрдп рд▓рдХреНрд╖рдг",
        basicPrecautionsTitle: "ЁЯТб рджреЗрдЦрднрд╛рд▓ рдФрд░ рд░реЛрдХрдерд╛рдо рдпреБрдХреНрддрд┐рдпрд╛рдБ",
        precautionsDefault: [
            "ЁЯз┤ рдзреАрд░реЗ рд╕реЗ рд╕рд╛рдл рдХрд░реЗрдВ: рджрд┐рди рдореЗрдВ рджреЛ рдмрд╛рд░ рд╣рд▓реНрдХреЗ рд╕рд╛рдмреБрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ",
            "ЁЯТз рдирд┐рдпрдорд┐рдд рдореЙрдЗрд╕реНрдЪрд░рд╛рдЗрдЬрд╝ рдХрд░реЗрдВ: рдЙрдкрдпреБрдХреНрдд рдореЙрдЗрд╕реНрдЪрд░рд╛рдЗрдЬрд╝рд░ рд╕реЗ рддреНрд╡рдЪрд╛ рдХреЛ рд╣рд╛рдЗрдбреНрд░реЗрдЯреЗрдб рд░рдЦреЗрдВ",
            "тШАя╕П рдзреВрдк рд╕реЗ рдмрдЪрд╛рд╡: рд░реЛрдЬрд╝рд╛рдирд╛ SPF 30+ рд╕рдирд╕реНрдХреНрд░реАрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ",
            "ЁЯеЧ рд╕реНрд╡рд╕реНрде рдЖрд╣рд╛рд░: рдПрдВрдЯреАрдСрдХреНрд╕реАрдбреЗрдВрдЯ рдпреБрдХреНрдд рднреЛрдЬрди рд▓реЗрдВ рдФрд░ рд╣рд╛рдЗрдбреНрд░реЗрдЯреЗрдб рд░рд╣реЗрдВ"
        ],
        precautionsAcne: [
            "ЁЯз╝ рджрд┐рди рдореЗрдВ рджреЛ рдмрд╛рд░ рд╣рд▓реНрдХреЗ, рддреЗрд▓-рд░рд╣рд┐рдд рдХреНрд▓реАрдВрдЬрд╝рд░ рд╕реЗ рдЪреЗрд╣рд░рд╛ рдзреЛрдПрдВ",
            "ЁЯЪл рдмреИрдХреНрдЯреАрд░рд┐рдпрд╛ рдХреЗ рдкреНрд░рд╕рд╛рд░ рдХреЛ рд░реЛрдХрдиреЗ рдХреЗ рд▓рд┐рдП рдЪреЗрд╣рд░реЗ рдХреЛ рдЫреВрдиреЗ рд╕реЗ рдмрдЪреЗрдВ",
            "тЬи рдХреЗрд╡рд▓ рдиреЙрди-рдХреЙрдореЗрдбреЛрдЬреЗрдирд┐рдХ (рдЫрд┐рджреНрд░ рди рднрд░рдиреЗ рд╡рд╛рд▓реЗ) рдЙрддреНрдкрд╛рджреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ",
            "тЫФ рдХрднреА рднреА рджрд╛рдиреЗ рди рдлреЛрдбрд╝реЗрдВ - рдЗрд╕рд╕реЗ рдирд┐рд╢рд╛рди рдФрд░ рд╕рдВрдХреНрд░рдордг рд╣реЛрддрд╛ рд╣реИ"
        ],
        precautionsEczema: [
            "ЁЯТз рддреНрд╡рдЪрд╛ рдХреЛ рдореЙрдЗрд╕реНрдЪрд░рд╛рдЗрдЬрд╝ рд░рдЦреЗрдВ, рдЦрд╛рд╕рдХрд░ рд╕реНрдирд╛рди рдХреЗ рдмрд╛рдж",
            "ЁЯЪл рдХрдареЛрд░ рд╕рд╛рдмреБрди, рдбрд┐рдЯрд░реНрдЬреЗрдВрдЯ рдФрд░ рд╕реБрдЧрдВрдзрд┐рдд рдЙрддреНрдкрд╛рджреЛрдВ рд╕реЗ рдмрдЪреЗрдВ",
            "ЁЯМбя╕П рд╕реНрдирд╛рди рдФрд░ рд╢рд╛рд╡рд░ рдХреЗ рд▓рд┐рдП рдЧреБрдирдЧреБрдиреЗ рдкрд╛рдиреА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ",
            "ЁЯСХ рдвреАрд▓реЗ, рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рд╡рд╛рд▓реЗ рд╕реВрддреА рдХрдкрдбрд╝реЗ рдкрд╣рдиреЗрдВ"
        ],
        precautionsFungal: [
            "ЁЯз╜ рдкреНрд░рднрд╛рд╡рд┐рдд рдХреНрд╖реЗрддреНрд░ рдХреЛ рд╕рд╛рдл рдФрд░ рдкреВрд░реА рддрд░рд╣ рд╕реБрдЦрд╛ рд░рдЦреЗрдВ",
            "ЁЯТК рдлрд╛рд░реНрдорд╛рд╕рд┐рд╕реНрдЯ рдХреЗ рдирд┐рд░реНрджреЗрд╢рд╛рдиреБрд╕рд╛рд░ рдПрдВрдЯреА-рдлрдВрдЧрд▓ рдХреНрд░реАрдо/рдкрд╛рдЙрдбрд░ рд▓рдЧрд╛рдПрдВ",
            "ЁЯЪл рддреМрд▓рд┐рдП, рдЯреЛрдкреА, рдХрдВрдШреА рдпрд╛ рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╡рд╕реНрддреБрдУрдВ рдХреЛ рд╕рд╛рдЭрд╛ рди рдХрд░реЗрдВ",
            "ЁЯСФ рд╕рд╛рдл, рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рд╡рд╛рд▓реЗ рдХрдкрдбрд╝реЗ рдкрд╣рдиреЗрдВ рдФрд░ рд░реЛрдЬрд╝рд╛рдирд╛ рдмрджрд▓реЗрдВ"
        ],
        precautionsHealthy: [
            "ЁЯеЧ рд╡рд┐рдЯрд╛рдорд┐рди рдФрд░ рдЦрдирд┐рдЬреЛрдВ рдХреЗ рд╕рд╛рде рд╕рдВрддреБрд▓рд┐рдд рдЖрд╣рд╛рд░ рдмрдирд╛рдП рд░рдЦреЗрдВ",
            "тШАя╕П рд░реЛрдЬрд╝рд╛рдирд╛ рд╕рдирд╕реНрдХреНрд░реАрди рд╕рдордп рд╕реЗ рдкрд╣рд▓реЗ рдмреБрдврд╝рд╛рдкреЗ рд╕реЗ рдмрдЪрд╛рддрд╛ рд╣реИ",
            "ЁЯТз рд╕реНрд╡рд╕реНрде рдЪрдордХ рдХреЗ рд▓рд┐рдП рдирд┐рдпрдорд┐рдд рд░реВрдк рд╕реЗ рд╕рд╛рдл рдФрд░ рдореЙрдЗрд╕реНрдЪрд░рд╛рдЗрдЬрд╝ рдХрд░реЗрдВ",
            "ЁЯЪн рдзреВрдореНрд░рдкрд╛рди рдФрд░ рдЕрддреНрдпрдзрд┐рдХ рд╢рд░рд╛рдм рдХреЗ рд╕реЗрд╡рди рд╕реЗ рдмрдЪреЗрдВ"
        ],
        precautionsDisclaimer: "ЁЯТб рдпреЗ рд╕рд╛рдорд╛рдиреНрдп рдХрд▓реНрдпрд╛рдг рд╕реБрдЭрд╛рд╡ рд╣реИрдВред рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЪрд┐рдВрддрд╛рдУрдВ рдХреЗ рд▓рд┐рдП, рд╣рдореЗрд╢рд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреЗрд╢реЗрд╡рд░ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред",
        chatbotInstructions: "рддреНрд╡рдЪрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп, рд╕реНрдерд┐рддрд┐рдпреЛрдВ рдпрд╛ рд╕рд╛рдорд╛рдиреНрдп рдХрд▓реНрдпрд╛рдг рд╕рд▓рд╛рд╣ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдореБрдЭрд╕реЗ рдХреБрдЫ рднреА рдкреВрдЫреЗрдВред",
        chatbotPlaceholder: "рдпрд╣рд╛рдБ рдЕрдкрдирд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреНрд░рд╢реНрди рдЯрд╛рдЗрдк рдХрд░реЗрдВ...",
        sendButton: "рднреЗрдЬреЗрдВ",
        chatbotInitialMessage: "ЁЯСЛ рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ AI рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ рд╣реВрдБред рдореБрдЭрд╕реЗ рддреНрд╡рдЪрд╛ рдХреА рд╕реНрдерд┐рддрд┐рдпреЛрдВ, рд▓рдХреНрд╖рдгреЛрдВ рдпрд╛ рд╕рд╛рдорд╛рдиреНрдп рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд▓рд╛рд╣ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВред",
        networkError: "ЁЯМР рдХрдиреЗрдХреНрд╢рди рд╕рдорд╕реНрдпрд╛ред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдЗрдВрдЯрд░рдиреЗрдЯ рдЬрд╛рдВрдЪреЗрдВ рдФрд░ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
        apiError: "ЁЯдЦ AI рдЕрд╕реНрдерд╛рдпреА рд░реВрдк рд╕реЗ рдЕрдиреБрдкрд▓рдмреНрдзред рдХреГрдкрдпрд╛ рдПрдХ рдХреНрд╖рдг рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
        cameraError: "ЁЯУ╖ рдХреИрдорд░рд╛ рдПрдХреНрд╕реЗрд╕ рдЕрд╕реНрд╡реАрдХреГрддред рдХреГрдкрдпрд╛ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рд╕реЗрдЯрд┐рдВрдЧ рдореЗрдВ рдХреИрдорд░рд╛ рдЕрдиреБрдорддрд┐рдпрд╛рдБ рд╕рдХреНрд╖рдо рдХрд░реЗрдВред",
        browserError: "тЭМ рдЖрдкрдХрд╛ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдХреИрдорд░рд╛ рд╕реБрд╡рд┐рдзрд╛рдУрдВ рдХрд╛ рд╕рдорд░реНрдерди рдирд╣реАрдВ рдХрд░рддрд╛ред Chrome рдпрд╛ Firefox рдЖрдЬрд╝рдорд╛рдПрдВред",
        uploadError: "ЁЯУ╕ рдХреГрдкрдпрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╕реЗ рдкрд╣рд▓реЗ рдПрдХ рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ рдпрд╛ рдЦреАрдВрдЪреЗрдВред",
        analysisFailed: "тЭМ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдЕрд╕рдлрд▓ред рдХреГрдкрдпрд╛ рдПрдХ рд╕реНрдкрд╖реНрдЯ, рдЕрдЪреНрдЫреА рддрд░рд╣ рд╕реЗ рдкреНрд░рдХрд╛рд╢рд┐рдд рдЫрд╡рд┐ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
        language: "ЁЯМР рднрд╛рд╖рд╛",
        langInstruction: "in Hindi",
        photoTips: "ЁЯУЛ рдмреЗрд╣рддрд░ рдкрд░рд┐рдгрд╛рдореЛрдВ рдХреЗ рд▓рд┐рдП рдпреБрдХреНрддрд┐рдпрд╛рдБ:",
        tip1: "ЁЯТб рдЙрдЬреНрдЬреНрд╡рд▓, рдкреНрд░рд╛рдХреГрддрд┐рдХ рдкреНрд░рдХрд╛рд╢ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ (рдЦрд┐рдбрд╝рдХреА рдХреЗ рдкрд╛рд╕ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛)",
        tip2: "ЁЯФН рдкреНрд░рднрд╛рд╡рд┐рдд рддреНрд╡рдЪрд╛ рдХреНрд╖реЗрддреНрд░ рдХреА рд╕реНрдкрд╖реНрдЯ, рдХреЗрдВрджреНрд░рд┐рдд рддрд╕реНрд╡реАрд░ рд▓реЗрдВ",
        tip3: "ЁЯСН рджреГрд╢реНрдп рдХреЛ рдЕрд╡рд░реБрджреНрдз рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдЧрд╣рдиреЗ/рдХрдкрдбрд╝реЗ рд╣рдЯрд╛рдПрдВ",
        tip4: "ЁЯУП рдЗрд╖реНрдЯрддрдо рд╡рд┐рд╡рд░рдг рдХреЗ рд▓рд┐рдП рдХреИрдорд░реЗ рдХреЛ 6-12 рдЗрдВрдЪ рджреВрд░ рд░рдЦреЗрдВ"
    },
    mr: {
        title: "AI рддреНрд╡рдЪрд╛ рд░реЛрдЧ рддрдкрд╛рд╕рдгреА",
        tagline: "рддреБрдордЪрд╛ рд╣реБрд╢рд╛рд░ рдЖрд░реЛрдЧреНрдп рдорд┐рддреНрд░ - рдкреНрд░рдЧрдд AI рджреНрд╡рд╛рд░реЗ рддреНрд╡рдЪреЗрдЪреНрдпрд╛ рд╕рдорд╕реНрдпрд╛рдВрдЪреА рдУрд│рдЦ рдХрд░рд╛",
        tabDiagnosis: "ЁЯФм рддреНрд╡рдЪрд╛ рддрдкрд╛рд╕рдгреА",
        tabChatbot: "ЁЯдЦ рдЖрд░реЛрдЧреНрдп рд╕рд╣рд╛рдпрдХ",
        diagnosisInstructions: "AI рджреНрд╡рд╛рд░реЗ рддреНрд╡рдЪреЗрдЪреНрдпрд╛ рд╕реНрдерд┐рддреАрдЪреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдорд┐рд│рд╡рдгреНрдпрд╛рд╕рд╛рдареА рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░рд╛ рдХрд┐рдВрд╡рд╛ рдХрд╛рдврд╛.",
        disclaimer: "тЪая╕П рд╡реИрджреНрдпрдХреАрдп рдЕрд╕реНрд╡реАрдХрд░рдг: рд╣реЗ рд╕рд╛рдзрди рдХреЗрд╡рд│ рд╢реИрдХреНрд╖рдгрд┐рдХ рд╣реЗрддреВрдВрд╕рд╛рдареА рдЖрд╣реЗ рдЖрдгрд┐ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рд╡реИрджреНрдпрдХреАрдп рд╕рд▓реНрд▓реНрдпрд╛рдЪрд╛ рдкрд░реНрдпрд╛рдп рдирд╛рд╣реА. рдиреЗрд╣рдореА рдкрд╛рддреНрд░ рддреНрд╡рдЪрд╛ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮрд╛рдВрдЪрд╛ рд╕рд▓реНрд▓рд╛ рдШреНрдпрд╛.",
        imagePlaceholder: "ЁЯУ╖ рдлреЛрдЯреЛ рдкреВрд░реНрд╡рд╛рд╡рд▓реЛрдХрди рдХреНрд╖реЗрддреНрд░",
        uploadButton: "ЁЯУБ рдлрд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░рд╛",
        takePhotoButton: "ЁЯУ╖ рдлреЛрдЯреЛ рдХрд╛рдврд╛",
        capturePhotoButton: "ЁЯУ╕ рдХреЕрдкреНрдЪрд░ рдХрд░рд╛",
        switchCameraButton: "ЁЯФД рдХреЕрдореЗрд░рд╛ рдмрджрд▓рд╛",
        analyzeButton: "ЁЯза AI рдиреЗ рддрдкрд╛рд╕рд╛",
        analyzing: "ЁЯФН рддрдкрд╛рд╕рдгреА рд╣реЛрдд рдЖрд╣реЗ...",
        analysisResults: "ЁЯУК AI рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд░рд┐рдгрд╛рдо",
        diseaseName: "рд╕реНрдерд┐рддреА:",
        confidenceScore: "рд╡рд┐рд╢реНрд╡рд╛рд╕ рдкрд╛рддрд│реА:",
        symptomsTitle: "ЁЯй║ рд╕рд╛рдорд╛рдиреНрдп рд▓рдХреНрд╖рдгреЗ",
        basicPrecautionsTitle: "ЁЯТб рдХрд╛рд│рдЬреА рдЖрдгрд┐ рдкреНрд░рддрд┐рдмрдВрдз рдЯрд┐рдкреНрд╕",
        precautionsDefault: [
            "ЁЯз┤ рд╣рд│реВрд╡рд╛рд░рдкрдгреЗ рд╕реНрд╡рдЪреНрдЫ рдХрд░рд╛: рджрд┐рд╡рд╕рд╛рддреВрди рджреЛрдирджрд╛ рд╕реМрдореНрдп рд╕рд╛рдмрдгрд╛рдЪрд╛ рд╡рд╛рдкрд░ рдХрд░рд╛",
            "ЁЯТз рдиреЗрд╣рдореА рдореЙрдЗрд╢реНрдЪрд░рд╛рдЗрдЭ рдХрд░рд╛: рдпреЛрдЧреНрдп рдореЙрдЗрд╢реНрдЪрд░рд╛рдпрдЭрд░рдиреЗ рддреНрд╡рдЪрд╛ рд╣рд╛рдпрдбреНрд░реЗрдЯреЗрдб рдареЗрд╡рд╛",
            "тШАя╕П рд╕реВрд░реНрдпрд╛рдкрд╛рд╕реВрди рд╕рдВрд░рдХреНрд╖рдг рдХрд░рд╛: рд░реЛрдЬ SPF 30+ рд╕рдирд╕реНрдХреНрд░реАрдирдЪрд╛ рд╡рд╛рдкрд░ рдХрд░рд╛",
            "ЁЯеЧ рдирд┐рд░реЛрдЧреА рдЖрд╣рд╛рд░: рдЕрдБрдЯрд┐рдСрдХреНрд╕рд┐рдбрдВрдЯ рд╕рдореГрджреНрдз рдкрджрд╛рд░реНрде рдЦрд╛ рдЖрдгрд┐ рд╣рд╛рдпрдбреНрд░реЗрдЯреЗрдб рд░рд╛рд╣рд╛"
        ],
        precautionsAcne: [
            "ЁЯз╝ рджрд┐рд╡рд╕рд╛рддреВрди рджреЛрдирджрд╛ рд╣рд▓рдХреНрдпрд╛, рддреЗрд▓-рдореБрдХреНрдд рдХреНрд▓реАрдВрдЭрд░рдиреЗ рдЪреЗрд╣рд░рд╛ рдзреБрд╡рд╛",
            "ЁЯЪл рдмреЕрдХреНрдЯреЗрд░рд┐рдпрд╛ рдкрд╕рд░реВ рдирдпреЗ рдореНрд╣рдгреВрди рдЪреЗрд╣рд░рд╛ рд╕реНрдкрд░реНрд╢ рдХрд░рдгреЗ рдЯрд╛рд│рд╛",
            "тЬи рдлрдХреНрдд рдиреЙрди-рдХреЙрдореЗрдбреЛрдЬреЗрдирд┐рдХ (рдЫрд┐рджреНрд░ рди рднрд░рдгрд╛рд░реА) рдЙрддреНрдкрд╛рджрдиреЗ рд╡рд╛рдкрд░рд╛",
            "тЫФ рдХрдзреАрд╣реА рдлреЛрдб рдлреЛрдбреВ рдирдХрд╛ - рдпрд╛рдореБрд│реЗ рдбрд╛рдЧ рдЖрдгрд┐ рд╕рдВрд╕рд░реНрдЧ рд╣реЛрддреЛ"
        ],
        precautionsEczema: [
            "ЁЯТз рддреНрд╡рдЪрд╛ рдореЙрдЗрд╢реНрдЪрд░рд╛рдЗрдЭ рдареЗрд╡рд╛, рд╡рд┐рд╢реЗрд╖рддрдГ рдЖрдВрдШреЛрд│реАрдирдВрддрд░",
            "ЁЯЪл рдХрдареЛрд░ рд╕рд╛рдмрдг, рдбрд┐рдЯрд░реНрдЬрдВрдЯ рдЖрдгрд┐ рд╕реБрдЧрдВрдзрд┐рдд рдЙрддреНрдкрд╛рджрдирд╛рдВрдкрд╛рд╕реВрди рджреВрд░ рд░рд╛рд╣рд╛",
            "ЁЯМбя╕П рдЖрдВрдШреЛрд│ рдЖрдгрд┐ рд╢реЙрд╡рд░рд╕рд╛рдареА рдХреЛрдордЯ рдкрд╛рдгреНрдпрд╛рдЪрд╛ рд╡рд╛рдкрд░ рдХрд░рд╛",
            "ЁЯСХ рд╕реИрд▓, рд╢реНрд╡рд╛рд╕ рдШреЗрдгрд╛рд░реЗ рдХрд╛рдкрд╕рд╛рдЪреЗ рдХрдкрдбреЗ рдШрд╛рд▓рд╛"
        ],
        precautionsFungal: [
            "ЁЯз╜ рдмрд╛рдзрд┐рдд рднрд╛рдЧ рд╕реНрд╡рдЪреНрдЫ рдЖрдгрд┐ рдкреВрд░реНрдгрдкрдгреЗ рдХреЛрд░рдбрд╛ рдареЗрд╡рд╛",
            "ЁЯТК рдлрд╛рд░реНрдорд╛рд╕рд┐рд╕реНрдЯрдЪреНрдпрд╛ рдирд┐рд░реНрджреЗрд╢рд╛рдиреБрд╕рд╛рд░ рдЕрдБрдЯреА-рдлрдВрдЧрд▓ рдХреНрд░реАрдо/рдкрд╛рд╡рдбрд░ рд╡рд╛рдкрд░рд╛",
            "ЁЯЪл рдЯреЙрд╡реЗрд▓, рдЯреЛрдкреА, рдХрдВрдЧрд╡рд╛ рдХрд┐рдВрд╡рд╛ рд╡реИрдпрдХреНрддрд┐рдХ рд╡рд╕реНрддреВ рд╕рд╛рдорд╛рдпрд┐рдХ рдХрд░реВ рдирдХрд╛",
            "ЁЯСФ рд╕реНрд╡рдЪреНрдЫ, рд╢реНрд╡рд╛рд╕ рдШреЗрдгрд╛рд░реЗ рдХрдкрдбреЗ рдШрд╛рд▓рд╛ рдЖрдгрд┐ рд░реЛрдЬ рдмрджрд▓рд╛"
        ],
        precautionsHealthy: [
            "ЁЯеЧ рдЬреАрд╡рдирд╕рддреНрддреНрд╡реЗ рдЖрдгрд┐ рдЦрдирд┐рдЬрд╛рдВрд╕рд╣ рд╕рдВрддреБрд▓рд┐рдд рдЖрд╣рд╛рд░ рд░рд╛рдЦрд╛",
            "тШАя╕П рд░реЛрдЬрдЪреЗ рд╕рдирд╕реНрдХреНрд░реАрди рдЕрдХрд╛рд▓реА рд╡реГрджреНрдзрддреНрд╡рд╛рдкрд╛рд╕реВрди рд╕рдВрд░рдХреНрд╖рдг рдХрд░рддреЗ",
            "ЁЯТз рдирд┐рд░реЛрдЧреА рдЪрдордХ рд╕рд╛рдареА рдирд┐рдпрдорд┐рддрдкрдгреЗ рд╕рд╛рдл рдЖрдгрд┐ рдореЙрдЗрд╢реНрдЪрд░рд╛рдЗрдЭ рдХрд░рд╛",
            "ЁЯЪн рдзреВрдореНрд░рдкрд╛рди рдЖрдгрд┐ рдЕрддреА рдорджреНрдпрдкрд╛рди рдЯрд╛рд│рд╛"
        ],
        precautionsDisclaimer: "ЁЯТб рд╣реЗ рд╕рд╛рдорд╛рдиреНрдп рдХрд▓реНрдпрд╛рдг рд╕реВрдЪрдирд╛ рдЖрд╣реЗрдд. рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╡реИрджреНрдпрдХреАрдп рдЪрд┐рдВрддрд╛рдВрд╕рд╛рдареА, рдиреЗрд╣рдореА рдЖрд░реЛрдЧреНрдп рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХрд╛рдВрдЪрд╛ рд╕рд▓реНрд▓рд╛ рдШреНрдпрд╛.",
        chatbotInstructions: "рддреНрд╡рдЪреЗрдЪреНрдпрд╛ рдЖрд░реЛрдЧреНрдпрд╛рдмрджреНрджрд▓, рд╕реНрдерд┐рддреАрдВрдмрджреНрджрд▓ рдХрд┐рдВрд╡рд╛ рд╕рд╛рдорд╛рдиреНрдп рдХрд▓реНрдпрд╛рдг рд╕рд▓реНрд▓реНрдпрд╛рдмрджреНрджрд▓ рдорд▓рд╛ рдХрд╛рд╣реАрд╣реА рд╡рд┐рдЪрд╛рд░рд╛.",
        chatbotPlaceholder: "рдпреЗрдереЗ рддреБрдордЪрд╛ рдЖрд░реЛрдЧреНрдп рдкреНрд░рд╢реНрди рдЯрд╛рдЗрдк рдХрд░рд╛...",
        sendButton: "рдкрд╛рдард╡рд╛",
        chatbotInitialMessage: "ЁЯСЛ рдирдорд╕реНрдХрд╛рд░! рдореА рддреБрдордЪрд╛ AI рдЖрд░реЛрдЧреНрдп рд╕рд╣рд╛рдпрдХ рдЖрд╣реЗ. рдорд▓рд╛ рддреНрд╡рдЪреЗрдЪреНрдпрд╛ рд╕реНрдерд┐рддреАрдВрдмрджреНрджрд▓, рд▓рдХреНрд╖рдгрд╛рдВрдмрджреНрджрд▓ рдХрд┐рдВрд╡рд╛ рд╕рд╛рдорд╛рдиреНрдп рдЖрд░реЛрдЧреНрдп рд╕рд▓реНрд▓реНрдпрд╛рдмрджреНрджрд▓ рд╡рд┐рдЪрд╛рд░рд╛.",
        networkError: "ЁЯМР рдХрдиреЗрдХреНрд╢рди рд╕рдорд╕реНрдпрд╛. рдХреГрдкрдпрд╛ рддреБрдордЪреЗ рдЗрдВрдЯрд░рдиреЗрдЯ рддрдкрд╛рд╕рд╛ рдЖрдгрд┐ рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.",
        apiError: "ЁЯдЦ AI рддрд╛рддреНрдкреБрд░рддреЗ рдЕрдиреБрдкрд▓рдмреНрдз. рдХреГрдкрдпрд╛ рдХреНрд╖рдгрднрд░рд╛рдд рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.",
        cameraError: "ЁЯУ╖ рдХреЕрдореЗрд░рд╛ рдкреНрд░рд╡реЗрд╢ рдирд╛рдХрд╛рд░рд▓рд╛. рдХреГрдкрдпрд╛ рдмреНрд░рд╛рдЙрдЭрд░ рд╕реЗрдЯрд┐рдВрдЧрдордзреНрдпреЗ рдХреЕрдореЗрд░рд╛ рдкрд░рд╡рд╛рдирдЧреНрдпрд╛ рд╕рдХреНрд╖рдо рдХрд░рд╛.",
        browserError: "тЭМ рддреБрдордЪрд╛ рдмреНрд░рд╛рдЙрдЭрд░ рдХреЕрдореЗрд░рд╛ рд╡реИрд╢рд┐рд╖реНрдЯреНрдпрд╛рдВрдирд╛ рд╕рдорд░реНрдерди рджреЗрдд рдирд╛рд╣реА. Chrome рдХрд┐рдВрд╡рд╛ Firefox рд╡рд╛рдкрд░реВрди рдкрд╣рд╛.",
        uploadError: "ЁЯУ╕ рдХреГрдкрдпрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдгрд╛рдкреВрд░реНрд╡реА рдПрдХ рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░рд╛ рдХрд┐рдВрд╡рд╛ рдХрд╛рдврд╛.",
        analysisFailed: "тЭМ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдЕрдпрд╢рд╕реНрд╡реА. рдХреГрдкрдпрд╛ рд╕реНрдкрд╖реНрдЯ, рдЪрд╛рдВрдЧрд▓реНрдпрд╛ рдкреНрд░рдХрд╛рд╢рд╛рдд рдЕрд╕рд▓реЗрд▓реА рдкреНрд░рддрд┐рдорд╛ рд╡рд╛рдкрд░реВрди рдкрд╣рд╛.",
        language: "ЁЯМР рднрд╛рд╖рд╛",
        langInstruction: "in Marathi",
        photoTips: "ЁЯУЛ рдЪрд╛рдВрдЧрд▓реНрдпрд╛ рдкрд░рд┐рдгрд╛рдорд╛рдВрд╕рд╛рдареА рдЯрд┐рдкреНрд╕:",
        tip1: "ЁЯТб рддреЗрдЬрд╕реНрд╡реА, рдиреИрд╕рд░реНрдЧрд┐рдХ рдкреНрд░рдХрд╛рд╢ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рд╛ (рдЦрд┐рдбрдХреАрдЬрд╡рд│ рд╕рд░реНрд╡реЛрддреНрддрдо)",
        tip2: "ЁЯФН рдмрд╛рдзрд┐рдд рддреНрд╡рдЪрд╛ рдХреНрд╖реЗрддреНрд░рд╛рдЪрд╛ рд╕реНрдкрд╖реНрдЯ, рдХреЗрдВрджреНрд░рд┐рдд рдлреЛрдЯреЛ рдШреНрдпрд╛",
        tip3: "ЁЯСН рджреГрд╢реНрдп рдЕрд╡рд░реЛрдзрд┐рдд рдХрд░рдгрд╛рд░реЗ рджрд╛рдЧрд┐рдиреЗ/рдХрдкрдбреЗ рдХрд╛рдвреВрди рдЯрд╛рдХрд╛",
        tip4: "ЁЯУП рдЗрд╖реНрдЯрддрдо рддрдкрд╢реАрд▓рд╛рд╕рд╛рдареА рдХреЕрдореЗрд░рд╛ 6-12 рдЗрдВрдЪ рдЕрдВрддрд░рд╛рд╡рд░ рдареЗрд╡рд╛"
    }
};

const diseaseSymptoms = {
    en: {
        "acne": ["ЁЯФ┤ Red bumps or whiteheads on skin", "ЁЯЫвя╕П Oily, shiny skin texture", "ЁЯТв Painful cysts under the skin", "ЁЯП┤ Blackheads in pores"],
        "eczema": ["ЁЯПЬя╕П Dry, itchy patches of skin", "ЁЯФ┤ Red or brownish-gray patches", "ЁЯТз Small bumps that may leak fluid", "ЁЯУП Rough, scaly texture"],
        "psoriasis": ["ЁЯФ┤ Red patches with thick, silvery scales", "ЁЯй╕ Dry, cracked skin that may bleed", "ЁЯФе Itching, burning, or soreness", "ЁЯТЕ Nail pitting and discoloration"],
        "fungal infection": ["тнХ Red, scaly rash in ring shape", "ЁЯФе Itching or burning sensation", "ЁЯУД Cracked, peeling skin", "ЁЯСг Common between toes"],
        "healthy skin": ["тЬи Even tone and smooth texture", "ЁЯЪл No blemishes or rashes", "ЁЯдП Feels soft and supple", "ЁЯТз Well-hydrated appearance"]
    },
    hi: {
        "acne": ["ЁЯФ┤ рддреНрд╡рдЪрд╛ рдкрд░ рд▓рд╛рд▓ рджрд╛рдиреЗ рдпрд╛ рд╕рдлреЗрдж рдореБрдВрд╣рд╛рд╕реЗ", "ЁЯЫвя╕П рддреИрд▓реАрдп, рдЪрдордХрджрд╛рд░ рддреНрд╡рдЪрд╛", "ЁЯТв рддреНрд╡рдЪрд╛ рдХреЗ рдиреАрдЪреЗ рджрд░реНрджрдирд╛рдХ рдЧрд╛рдВрдареЗрдВ", "ЁЯП┤ рдЫрд┐рджреНрд░реЛрдВ рдореЗрдВ рдмреНрд▓реИрдХрд╣реЗрдбреНрд╕"],
        "eczema": ["ЁЯПЬя╕П рддреНрд╡рдЪрд╛ рдкрд░ рд╕реВрдЦреЗ, рдЦреБрдЬрд▓реА рд╡рд╛рд▓реЗ рдзрдмреНрдмреЗ", "ЁЯФ┤ рд▓рд╛рд▓ рдпрд╛ рднреВрд░реЗ-рд╕реНрд▓реЗрдЯреА рд░рдВрдЧ рдХреЗ рдзрдмреНрдмреЗ", "ЁЯТз рдЫреЛрдЯреЗ рджрд╛рдиреЗ рдЬрд┐рдирд╕реЗ рддрд░рд▓ рдирд┐рдХрд▓ рд╕рдХрддрд╛ рд╣реИ", "ЁЯУП рдЦреБрд░рджрд░реА, рдкрдкрдбрд╝реАрджрд╛рд░ рдмрдирд╛рд╡рдЯ"],
        "psoriasis": ["ЁЯФ┤ рдореЛрдЯреА, рдЪрд╛рдВрджреА рдХреА рдкрдкрдбрд╝реА рд╡рд╛рд▓реЗ рд▓рд╛рд▓ рдзрдмреНрдмреЗ", "ЁЯй╕ рд╕реВрдЦреА, рдлрдЯреА рддреНрд╡рдЪрд╛ рдЬрд┐рд╕рдореЗрдВ рдЦреВрди рдЖ рд╕рдХрддрд╛ рд╣реИ", "ЁЯФе рдЦреБрдЬрд▓реА, рдЬрд▓рди рдпрд╛ рджрд░реНрдж", "ЁЯТЕ рдирд╛рдЦреВрдиреЛрдВ рдореЗрдВ рдЧрдбреНрдвреЗ рдФрд░ рд░рдВрдЧ рдмрджрд▓рдирд╛"],
        "fungal infection": ["тнХ рдЕрдВрдЧреВрдареА рдХреЗ рдЖрдХрд╛рд░ рдореЗрдВ рд▓рд╛рд▓, рдкрдкрдбрд╝реАрджрд╛рд░ рджрд╛рдиреЗ", "ЁЯФе рдЦреБрдЬрд▓реА рдпрд╛ рдЬрд▓рди рдХреА рднрд╛рд╡рдирд╛", "ЁЯУД рдлрдЯреА, рдЫрд┐рд▓рддреА рддреНрд╡рдЪрд╛", "ЁЯСг рдкреИрд░ рдХреА рдЙрдВрдЧрд▓рд┐рдпреЛрдВ рдХреЗ рдмреАрдЪ рдЖрдо"],
        "healthy skin": ["тЬи рд╕рдорд╛рди рд░рдВрдЧ рдФрд░ рдЪрд┐рдХрдиреА рдмрдирд╛рд╡рдЯ", "ЁЯЪл рдХреЛрдИ рджрд╛рдЧ рдпрд╛ рджрд╛рдиреЗ рдирд╣реАрдВ", "ЁЯдП рдирд░рдо рдФрд░ рдореБрд▓рд╛рдпрдо рдорд╣рд╕реВрд╕", "ЁЯТз рдЕрдЪреНрдЫреА рддрд░рд╣ рд╕реЗ рд╣рд╛рдЗрдбреНрд░реЗрдЯреЗрдб рджрд┐рдЦрд╛рд╡рдЯ"]
    },
    mr: {
        "acne": ["ЁЯФ┤ рддреНрд╡рдЪреЗрд╡рд░ рд▓рд╛рд▓ рдкреБрд░рд│ рдХрд┐рдВрд╡рд╛ рдкрд╛рдВрдврд░реЗ рдбрд╛рдЧ", "ЁЯЫвя╕П рддреЗрд▓рдХрдЯ, рдЪрдордХрджрд╛рд░ рддреНрд╡рдЪрд╛ рдкреЛрдд", "ЁЯТв рддреНрд╡рдЪреЗрдЦрд╛рд▓реА рд╡реЗрджрдирд╛рджрд╛рдпрдХ рдЧрд╛рдареА", "ЁЯП┤ рдЫрд┐рджреНрд░рд╛рдВрдордзреНрдпреЗ рдмреНрд▓реЕрдХрд╣реЗрдбреНрд╕"],
        "eczema": ["ЁЯПЬя╕П рддреНрд╡рдЪреЗрд╡рд░ рдХреЛрд░рдбреЗ, рдЦрд╛рдЬ рд╕реБрдЯрдгрд╛рд░реЗ рдЪрдЯреНрдЯреЗ", "ЁЯФ┤ рд▓рд╛рд▓ рдХрд┐рдВрд╡рд╛ рддрдкрдХрд┐рд░реА-рд░рд╛рдЦрд╛рдбреА рд░рдВрдЧрд╛рдЪреЗ рдЪрдЯреНрдЯреЗ", "ЁЯТз рд▓рд╣рд╛рди рдкреБрд░рд│ рдЬреНрдпрд╛рддреВрди рджреНрд░рд╡ рдпреЗрдК рд╢рдХрддреЛ", "ЁЯУП рдЦрдбрдмрдбреАрдд, рдЦрд╡рд▓реЗрдпреБрдХреНрдд рдкреЛрдд"],
        "psoriasis": ["ЁЯФ┤ рдЬрд╛рдб, рдЪрд╛рдВрджреАрд╕рд╛рд░рдЦреНрдпрд╛ рдЦрд╡рд▓реНрдпрд╛рдВрд╕рд╣ рд▓рд╛рд▓ рдЪрдЯреНрдЯреЗ", "ЁЯй╕ рдХреЛрд░рдбреА, рдлрд╛рдЯрд▓реЗрд▓реА рддреНрд╡рдЪрд╛ рдЬреНрдпрд╛рддреВрди рд░рдХреНрдд рдпреЗрдК рд╢рдХрддреЗ", "ЁЯФе рдЦрд╛рдЬ, рдЬрд│рдЬрд│ рдХрд┐рдВрд╡рд╛ рд╡реЗрджрдирд╛", "ЁЯТЕ рдирдЦрд╛рдВрдордзреНрдпреЗ рдЦрдбреНрдбреЗ рдЖрдгрд┐ рд░рдВрдЧ рдмрджрд▓"],
        "fungal infection": ["тнХ рд╡рд░реНрддреБрд│рд╛рдХрд╛рд░ рдЖрдХрд╛рд░рд╛рдд рд▓рд╛рд▓, рдЦрд╡рд▓реЗрдпреБрдХреНрдд рдкреБрд░рд│", "ЁЯФе рдЦрд╛рдЬ рдХрд┐рдВрд╡рд╛ рдЬрд│рдЬрд│ рд╣реЛрдгреНрдпрд╛рдЪреА рднрд╛рд╡рдирд╛", "ЁЯУД рдлрд╛рдЯрд▓реЗрд▓реА, рд╕реЛрд▓рд▓реЗрд▓реА рддреНрд╡рдЪрд╛", "ЁЯСг рдкрд╛рдпрд╛рдЪреНрдпрд╛ рдмреЛрдЯрд╛рдВрдордзреНрдпреЗ рд╕рд╛рдорд╛рдиреНрдп"],
        "healthy skin": ["тЬи рд╕рдорд╛рди рд░рдВрдЧ рдЖрдгрд┐ рдЧреБрд│рдЧреБрд│реАрдд рдкреЛрдд", "ЁЯЪл рдХреЛрдгрддреЗрд╣реА рдбрд╛рдЧ рдХрд┐рдВрд╡рд╛ рдкреБрд░рд│ рдирд╛рд╣реА", "ЁЯдП рдордК рдЖрдгрд┐ рд▓рд╡рдЪрд┐рдХ рд╡рд╛рдЯрдгреЗ", "ЁЯТз рдЪрд╛рдВрдЧрд▓реНрдпрд╛ рдкреНрд░рдХрд╛рд░реЗ рд╣рд╛рдпрдбреНрд░реЗрдЯреЗрдб рджрд┐рд╕рдгреЗ"]
    }
};

const App = () => {
    const [locale, setLocale] = useState('en');
    const t = translations[locale];

    const [activeTab, setActiveTab] = useState('diagnosis');
    
    // Diagnosis states
    const [imageSrc, setImageSrc] = useState(null);
    const [isAnalyzing, setIsAnalyzing] = useState(false);
    const [diagnosis, setDiagnosis] = useState(null);
    const [diagnosisErrorMessage, setDiagnosisErrorMessage] = useState('');
    const fileInputRef = useRef(null);
    const videoRef = useRef(null);
    const canvasRef = useRef(null);
    const [isCameraActive, setIsCameraActive] = useState(false);
    const [currentCamera, setCurrentCamera] = useState('environment');

    // Chatbot states
    const [chatHistory, setChatHistory] = useState([]);
    const [userMessage, setUserMessage] = useState('');
    const [isChatting, setIsChatting] = useState(false);
    const chatContainerRef = useRef(null);

    const handleImageUpload = (event) => {
        setDiagnosisErrorMessage('');
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                setImageSrc(reader.result);
                setDiagnosis(null);
            };
            reader.readAsDataURL(file);
        }
    };

    const startCamera = (facingMode) => {
        setDiagnosisErrorMessage('');
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            setIsCameraActive(true);
            navigator.mediaDevices.getUserMedia({ video: { facingMode }, audio: false })
                .then(stream => {
                    videoRef.current.srcObject = stream;
                    videoRef.current.play();
                    setCurrentCamera(facingMode);
                })
                .catch(err => {
                    console.error("Error accessing camera: ", err);
                    setDiagnosisErrorMessage(t.cameraError);
                    setIsCameraActive(false);
                });
        } else {
            setDiagnosisErrorMessage(t.browserError);
        }
    };

    const handleTakePhoto = () => {
        startCamera('environment');
    };

    const switchCamera = () => {
        if (videoRef.current && videoRef.current.srcObject) {
            videoRef.current.srcObject.getTracks().forEach(track => track.stop());
        }
        const newCamera = currentCamera === 'environment' ? 'user' : 'environment';
        startCamera(newCamera);
    };

    const capturePhoto = () => {
        if (videoRef.current && canvasRef.current) {
            const context = canvasRef.current.getContext('2d');
            canvasRef.current.width = videoRef.current.videoWidth;
            canvasRef.current.height = videoRef.current.videoHeight;
            context.drawImage(videoRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height);
            const capturedImage = canvasRef.current.toDataURL('image/jpeg');
            setImageSrc(capturedImage);
            setDiagnosis(null);

            // Stop camera
            const stream = videoRef.current.srcObject;
            const tracks = stream.getTracks();
            tracks.forEach(track => track.stop());
            setIsCameraActive(false);
        }
    };

    const analyzeImage = async () => {
        if (!imageSrc) {
            setDiagnosisErrorMessage(t.uploadError);
            return;
        }

        setIsAnalyzing(true);
        setDiagnosis(null);
        setDiagnosisErrorMessage('');

        try {
            const base64Data = imageSrc.split(',')[1];
            
            const prompt = `Analyze this skin image to identify possible skin conditions. Respond with a JSON object containing 'diseaseName' (string), 'confidenceScore' (number 0-100), 'description' (string), and 'disclaimer' (string). If no specific condition is identified, use 'Healthy Skin' as the disease name. Provide medical accuracy based on dermatological knowledge.`;
            
            const payload = {
                contents: [
                    {
                        role: "user",
                        parts: [
                            { text: prompt },
                            {
                                inlineData: {
                                    mimeType: "image/jpeg",
                                    data: base64Data
                                }
                            }
                        ]
                    }
                ],
                generationConfig: {
                    responseMimeType: "application/json",
                    responseSchema: {
                        type: "OBJECT",
                        properties: {
                            "diseaseName": { "type": "STRING" },
                            "confidenceScore": { "type": "INTEGER" },
                            "description": { "type": "STRING" },
                            "disclaimer": { "type": "STRING" }
                        }
                    }
                }
            };
            
            // Real Gemini API with your API key
            const apiKey = "AIzaSyDbVaM34izzzi7I65DbYBsH3ssNIfiSaC0";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${apiKey}`;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            
            if (result.candidates && result.candidates[0] && result.candidates[0].content) {
                const jsonText = result.candidates[0].content.parts[0].text;
                const parsedDiagnosis = JSON.parse(jsonText);
                setDiagnosis(parsedDiagnosis);
            } else {
                throw new Error("Invalid response from API");
            }

        } catch (error) {
            console.error("Analysis failed:", error);
            setDiagnosisErrorMessage(t.analysisFailed);
        } finally {
            setIsAnalyzing(false);
        }
    };

    const handleSendMessage = async () => {
        if (userMessage.trim() === '') return;

        const newUserMessage = { role: 'user', text: userMessage };
        const newChatHistory = [...chatHistory, newUserMessage];
        setChatHistory(newChatHistory);
        setUserMessage('');
        setIsChatting(true);

        try {
            // Enhanced chatbot with Gemini API
            const prompt = `Provide a short and simple answer ${t.langInstruction} for a non-technical person about this skin health question: "${userMessage}". Answer in short sentences, like you would to a child or someone not familiar with complex medical terms.`;
            
            const payload = {
                contents: [{
                    role: "user",
                    parts: [{ text: prompt }]
                }]
            };

            const apiKey = "AIzaSyDbVaM34izzzi7I65DbYBsH3ssNIfiSaC0";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${apiKey}`;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            if (result.candidates && result.candidates.length > 0 && result.candidates[0].content) {
                const botMessage = result.candidates[0].content.parts[0].text;
                setChatHistory(prevChat => [...prevChat, { role: 'bot', text: botMessage }]);
            } else {
                setChatHistory(prevChat => [...prevChat, { role: 'bot', text: t.apiError }]);
            }

        } catch (error) {
            console.error("Chatbot error:", error);
            setChatHistory(prevChat => [...prevChat, { role: 'bot', text: t.networkError }]);
        } finally {
            setIsChatting(false);
        }
    };

    useEffect(() => {
        if (chatContainerRef.current) {
            chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
        }
    }, [chatHistory, isChatting]);

    const getSymptomsList = () => {
        if (!diagnosis || !diagnosis.diseaseName) return [];

        const diseaseName = diagnosis.diseaseName.toLowerCase();
        for (const key in diseaseSymptoms[locale]) {
            if (diseaseName.includes(key)) {
                return diseaseSymptoms[locale][key].map((item, index) => <li key={index}>{item}</li>);
            }
        }
        return [];
    };

    const getPrecautionsList = () => {
        const selectedList = (diagnosis && diagnosis.diseaseName) ? 
            (
                diagnosis.diseaseName.toLowerCase().includes('acne') ? t.precautionsAcne :
                diagnosis.diseaseName.toLowerCase().includes('eczema') ? t.precautionsEczema :
                diagnosis.diseaseName.toLowerCase().includes('fungal') ? t.precautionsFungal :
                diagnosis.diseaseName.toLowerCase().includes('healthy') ? t.precautionsHealthy :
                t.precautionsDefault
            ) : t.precautionsDefault;

        return selectedList.map((item, index) => {
            const parts = item.split(':');
            if (parts.length > 1) {
                return <li key={index}><span className="font-semibold">{parts[0]}:</span>{parts.slice(1).join(':')}</li>;
            } else {
                return <li key={index}>{item}</li>;
            }
        });
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 text-gray-900 dark:text-gray-100 p-4 font-sans">
            <div className="bg-white dark:bg-gray-800 shadow-2xl rounded-3xl p-8 max-w-6xl w-full mx-auto my-8 backdrop-blur-sm bg-opacity-95">
                <div className="text-center mb-8">
                    <h1 className="text-5xl font-extrabold mb-4 bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                        {t.title}
                    </h1>
                    <p className="text-xl text-gray-600 dark:text-gray-300 mb-6">
                        {t.tagline}
                    </p>
                    
                    <div className="flex justify-center items-center space-x-4 mb-8">
                        <label className="text-sm font-medium">{t.language}:</label>
                        <select
                            value={locale}
                            onChange={(e) => setLocale(e.target.value)}
                            className="p-3 rounded-xl bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-gray-700 dark:to-gray-600 border-2 border-indigo-200 dark:border-gray-500 text-gray-900 dark:text-gray-100 focus:ring-4 focus:ring-indigo-300 transition-all"
                        >
                            <option value="en">ЁЯЗ║ЁЯЗ╕ English</option>
                            <option value="hi">ЁЯЗоЁЯЗ│ рд╣рд┐рдВрджреА</option>
                            <option value="mr">ЁЯЗоЁЯЗ│ рдорд░рд╛рдареА</option>
                        </select>
                    </div>
                </div>

                {/* Tab Navigation */}
                <div className="flex justify-center mb-8">
                    <div className="bg-gray-100 dark:bg-gray-700 p-1 rounded-2xl">
                        <button
                            onClick={() => setActiveTab('diagnosis')}
                            className={`px-8 py-4 rounded-xl font-bold text-lg transition-all duration-300 ease-in-out ${
                                activeTab === 'diagnosis' 
                                ? 'bg-gradient-to-r from-indigo-500 to-purple-600 text-white shadow-lg transform scale-105' 
                                : 'text-gray-600 dark:text-gray-300 hover:text-indigo-600'
                            }`}
                        >
                            {t.tabDiagnosis}
                        </button>
                        <button
                            onClick={() => setActiveTab('chatbot')}
                            className={`px-8 py-4 rounded-xl font-bold text-lg transition-all duration-300 ease-in-out ${
                                activeTab === 'chatbot' 
                                ? 'bg-gradient-to-r from-indigo-500 to-purple-600 text-white shadow-lg transform scale-105' 
                                : 'text-gray-600 dark:text-gray-300 hover:text-indigo-600'
                            }`}
                        >
                            {t.tabChatbot}
                        </button>
                    </div>
                </div>

                {/* Diagnosis Section */}
                {activeTab === 'diagnosis' && (
                    <div className="space-y-8">
                        <div className="text-center">
                            <p className="text-lg text-gray-600 dark:text-gray-300 mb-4">
                                {t.diagnosisInstructions}
                            </p>
                            <div className="bg-yellow-50 dark:bg-yellow-900/30 border-l-4 border-yellow-400 p-4 rounded-r-lg">
                                <p className="text-sm text-yellow-800 dark:text-yellow-300 font-medium">
                                    {t.disclaimer}
                                </p>
                            </div>
                        </div>

                        {/* Photo Tips */}
                        <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 p-6 rounded-2xl border-2 border-blue-200 dark:border-blue-700">
                            <h3 className="text-xl font-bold text-blue-800 dark:text-blue-300 mb-4">{t.photoTips}</h3>
                            <div className="grid md:grid-cols-2 gap-3">
                                <div className="flex items-center space-x-3">
                                    <span className="text-2xl">ЁЯТб</span>
                                    <span className="text-blue-700 dark:text-blue-300">{t.tip1}</span>
                                </div>
                                <div className="flex items-center space-x-3">
                                    <span className="text-2xl">ЁЯФН</span>
                                    <span className="text-blue-700 dark:text-blue-300">{t.tip2}</span>
                                </div>
                                <div className="flex items-center space-x-3">
                                    <span className="text-2xl">ЁЯСН</span>
                                    <span className="text-blue-700 dark:text-blue-300">{t.tip3}</span>
                                </div>
                                <div className="flex items-center space-x-3">
                                    <span className="text-2xl">ЁЯУП</span>
                                    <span className="text-blue-700 dark:text-blue-300">{t.tip4}</span>
                                </div>
                            </div>
                        </div>

                        {/* Image Preview Area */}
                        <div className="relative w-full max-w-2xl mx-auto">
                            <div className="aspect-video bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-600 rounded-3xl overflow-hidden shadow-2xl border-4 border-dashed border-gray-300 dark:border-gray-500 flex items-center justify-center">
                                {imageSrc && !isCameraActive ? (
                                    <img src={imageSrc} alt="Preview" className="object-contain h-full w-full rounded-2xl" />
                                ) : isCameraActive ? (
                                    <>
                                        <video ref={videoRef} className="object-cover h-full w-full rounded-2xl" autoPlay playsInline muted></video>
                                        <canvas ref={canvasRef} style={{ display: 'none' }}></canvas>
                                    </>
                                ) : (
                                    <div className="text-center">
                                        <div className="text-6xl mb-4">ЁЯУ╖</div>
                                        <span className="text-gray-500 dark:text-gray-400 text-xl font-medium">{t.imagePlaceholder}</span>
                                    </div>
                                )}
                            </div>
                        </div>

                        {/* Control Buttons */}
                        <div className="flex flex-wrap justify-center gap-4">
                            <input type="file" accept="image/*" onChange={handleImageUpload} ref={fileInputRef} className="hidden" />
                            <button 
                                onClick={() => fileInputRef.current.click()} 
                                className="px-8 py-4 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white font-bold rounded-2xl shadow-lg transition-all transform hover:scale-105 hover:shadow-xl"
                            >
                                {t.uploadButton}
                            </button>
                            {!isCameraActive ? (
                                <button 
                                    onClick={handleTakePhoto} 
                                    className="px-8 py-4 bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white font-bold rounded-2xl shadow-lg transition-all transform hover:scale-105 hover:shadow-xl"
                                >
                                    {t.takePhotoButton}
                                </button>
                            ) : (
                                <>
                                    <button 
                                        onClick={capturePhoto} 
                                        className="px-8 py-4 bg-gradient-to-r from-red-500 to-pink-600 hover:from-red-600 hover:to-pink-700 text-white font-bold rounded-2xl shadow-lg transition-all transform hover:scale-105 hover:shadow-xl"
                                    >
                                        {t.capturePhotoButton}
                                    </button>
                                    <button 
                                        onClick={switchCamera} 
                                        className="px-8 py-4 bg-gradient-to-r from-gray-500 to-gray-600 hover:from-gray-600 hover:to-gray-700 text-white font-bold rounded-2xl shadow-lg transition-all transform hover:scale-105 hover:shadow-xl"
                                    >
                                        {t.switchCameraButton}
                                    </button>
                                </>
                            )}
                        </div>

                        {/* Analyze Button */}
                        <div className="text-center">
                            <button
                                onClick={analyzeImage}
                                disabled={!imageSrc || isAnalyzing}
                                className={`px-12 py-5 text-white font-bold text-xl rounded-2xl shadow-2xl transition-all transform hover:scale-105 ${
                                    !imageSrc || isAnalyzing 
                                    ? 'bg-gray-400 dark:bg-gray-600 cursor-not-allowed' 
                                    : 'bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 hover:shadow-3xl'
                                }`}
                            >
                                {isAnalyzing ? (
                                    <span className="flex items-center justify-center">
                                        <svg className="animate-spin -ml-1 mr-3 h-6 w-6 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                        </svg>
                                        {t.analyzing}
                                    </span>
                                ) : (
                                    t.analyzeButton
                                )}
                            </button>
                        </div>

                        {/* Error Message */}
                        {diagnosisErrorMessage && (
                            <div className="bg-red-50 dark:bg-red-900/30 border-l-4 border-red-500 text-red-700 dark:text-red-300 p-6 rounded-r-2xl">
                                <div className="flex items-center">
                                    <span className="text-2xl mr-3">тЪая╕П</span>
                                    <div>
                                        <p className="font-semibold text-lg">Error:</p>
                                        <p>{diagnosisErrorMessage}</p>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Results */}
                        {diagnosis && (
                            <div className="space-y-8">
                                <div className="bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 p-8 rounded-3xl shadow-2xl border-2 border-green-200 dark:border-green-700">
                                    <h2 className="text-3xl font-bold text-center mb-6 text-green-800 dark:text-green-300">{t.analysisResults}</h2>
                                    <div className="grid md:grid-cols-2 gap-6 mb-6">
                                        <div className="bg-white dark:bg-gray-800 p-6 rounded-2xl shadow-lg">
                                            <h3 className="text-xl font-semibold text-indigo-600 dark:text-indigo-400 mb-2">{t.diseaseName}</h3>
                                            <p className="text-2xl font-bold text-gray-900 dark:text-gray-100">{diagnosis.diseaseName}</p>
                                        </div>
                                        <div className="bg-white dark:bg-gray-800 p-6 rounded-2xl shadow-lg">
                                            <h3 className="text-xl font-semibold text-indigo-600 dark:text-indigo-400 mb-2">{t.confidenceScore}</h3>
                                            <div className="flex items-center">
                                                <div className="flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-3 mr-4">
                                                    <div className="bg-gradient-to-r from-green-400 to-green-600 h-3 rounded-full transition-all duration-1000" style={{width: `${diagnosis.confidenceScore}%`}}></div>
                                                </div>
                                                <span className="text-2xl font-bold text-gray-900 dark:text-gray-100">{diagnosis.confidenceScore}%</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div className="bg-white dark:bg-gray-800 p-6 rounded-2xl shadow-lg">
                                        <p className="text-gray-700 dark:text-gray-300 leading-relaxed mb-4">{diagnosis.description}</p>
                                        <p className="text-sm text-red-600 dark:text-red-400 font-medium bg-red-50 dark:bg-red-900/30 p-3 rounded-lg">{diagnosis.disclaimer}</p>
                                    </div>
                                </div>

                                {/* Symptoms */}
                                <div className="bg-gradient-to-r from-red-50 to-pink-50 dark:from-red-900/20 dark:to-pink-900/20 p-8 rounded-3xl shadow-2xl border-2 border-red-200 dark:border-red-700">
                                    <h2 className="text-3xl font-bold text-center mb-6 text-red-700 dark:text-red-400">{t.symptomsTitle}</h2>
                                    {getSymptomsList().length > 0 ? (
                                        <ul className="space-y-3 text-lg">
                                            {getSymptomsList()}
                                        </ul>
                                    ) : (
                                        <p className="text-center text-red-600 dark:text-red-400 text-lg">
                                            No specific symptoms found for this condition.
                                        </p>
                                    )}
                                </div>

                                {/* Precautions */}
                                <div className="bg-gradient-to-r from-teal-50 to-cyan-50 dark:from-teal-900/20 dark:to-cyan-900/20 p-8 rounded-3xl shadow-2xl border-2 border-teal-200 dark:border-teal-700">
                                    <h2 className="text-3xl font-bold text-center mb-6 text-teal-700 dark:text-teal-400">{t.basicPrecautionsTitle}</h2>
                                    <p className="text-center text-teal-600 dark:text-teal-400 mb-6 text-lg">
                                        {t.precautionsDisclaimer}
                                    </p>
                                    <ul className="space-y-4 text-lg">
                                        {getPrecautionsList()}
                                    </ul>
                                </div>
                            </div>
                        )}
                    </div>
                )}

                {/* Chatbot Section */}
                {activeTab === 'chatbot' && (
                    <div className="space-y-6">
                        <div className="text-center mb-6">
                            <p className="text-lg text-gray-600 dark:text-gray-300">
                                {t.chatbotInstructions}
                            </p>
                        </div>
                        
                        <div className="bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-700 rounded-3xl shadow-2xl h-96 flex flex-col">
                            <div ref={chatContainerRef} className="flex-1 overflow-y-auto p-6 space-y-4">
                                {chatHistory.length === 0 ? (
                                    <div className="text-center mt-20">
                                        <div className="text-6xl mb-4">ЁЯдЦ</div>
                                        <p className="text-xl text-gray-500 dark:text-gray-400">{t.chatbotInitialMessage}</p>
                                    </div>
                                ) : (
                                    chatHistory.map((msg, index) => (
                                        <div key={index} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                                            <div className={`max-w-xs sm:max-w-md p-4 rounded-2xl shadow-lg ${
                                                msg.role === 'user' 
                                                ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white' 
                                                : 'bg-white dark:bg-gray-600 text-gray-900 dark:text-gray-100'
                                            }`}>
                                                {msg.text}
                                            </div>
                                        </div>
                                    ))
                                )}
                                {isChatting && (
                                    <div className="flex justify-start">
                                        <div className="max-w-xs sm:max-w-md p-4 rounded-2xl bg-white dark:bg-gray-600 text-gray-900 dark:text-gray-100 shadow-lg">
                                            <div className="flex space-x-1">
                                                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                                                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                                                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                                            </div>
                                        </div>
                                    </div>
                                )}
                            </div>
                            
                            <div className="p-6 border-t border-gray-200 dark:border-gray-600">
                                <div className="flex space-x-3">
                                    <input
                                        type="text"
                                        className="flex-1 p-4 rounded-2xl bg-white dark:bg-gray-600 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-4 focus:ring-indigo-300 shadow-lg border-2 border-gray-200 dark:border-gray-500"
                                        placeholder={t.chatbotPlaceholder}
                                        value={userMessage}
                                        onChange={(e) => setUserMessage(e.target.value)}
                                        onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                                        disabled={isChatting}
                                    />
                                    <button
                                        onClick={handleSendMessage}
                                        disabled={isChatting || userMessage.trim() === ''}
                                        className={`px-8 py-4 rounded-2xl font-bold shadow-lg transition-all transform hover:scale-105 ${
                                            isChatting || userMessage.trim() === '' 
                                            ? 'bg-gray-400 dark:bg-gray-600 cursor-not-allowed text-gray-200' 
                                            : 'bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700 text-white hover:shadow-xl'
                                        }`}
                                    >
                                        {t.sendButton}
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default App;"""

# Save the complete App.js file with API key
with open('App_with_API.js', 'w', encoding='utf-8') as f:
    f.write(app_js_with_api)

print("ЁЯОЙ Complete App.js file with your API key created successfully!")
print("\nЁЯУБ File: App_with_API.js")
print(f"ЁЯУК Size: {len(app_js_with_api.split())} lines")
print(f"ЁЯФС API Key: AIzaSyDbVaM34izzzi7I65DbYBsH3ssNIfiSaC0 (integrated)")
print(f"ЁЯУ▒ Features included:")
print("тАв ЁЯМР Trilingual support (English, Hindi, Marathi)")
print("тАв ЁЯУ╖ Camera capture and file upload")
print("тАв ЁЯдЦ REAL Gemini AI analysis (no mock data)")  
print("тАв ЁЯТм REAL AI chatbot with multilingual responses")
print("тАв ЁЯОи Modern gradient UI design")
print("тАв тЪб Ready to copy and paste!")
print("\nЁЯЪА This version will give you REAL AI results!")
